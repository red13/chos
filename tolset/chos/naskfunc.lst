     1 00000000                                 ; CHOS
     2 00000000                                 ; naskfunc
     3 00000000                                 ; TAB=4
     4 00000000                                 
     5 00000000                                 [FORMAT "WCOFF"]			; オブジェクトファイルを作成
     6 00000000                                 [INSTRSET "i486p"]			; 486の命令まで使いたいという記述
     7 00000000                                 [BITS 32]					; 32ビットモード用の機械語を作らせる
     8 00000000                                 
     9 00000000                                 ; オブジェクトファイルのための情報
    10 00000000                                 
    11 00000000                                 [FILE "naskfunc.nas"]		; ソースファイル名情報
    12 00000000                                 
    13 00000000                                 		GLOBAL	_io_hlt		; このプログラムに含まれる関数名
    14 00000000                                 		GLOBAL	_io_cli
    15 00000000                                 		GLOBAL	_io_sti
    16 00000000                                 		GLOBAL	_io_stihlt
    17 00000000                                 		GLOBAL	_io_in8
    18 00000000                                 		GLOBAL	_io_in16
    19 00000000                                 		GLOBAL	_io_in32
    20 00000000                                 		GLOBAL	_io_out8
    21 00000000                                 		GLOBAL	_io_out16
    22 00000000                                 		GLOBAL	_io_out32
    23 00000000                                 		GLOBAL	_io_load_eflags
    24 00000000                                 		GLOBAL	_io_store_eflags
    25 00000000                                 		GLOBAL	_load_gdtr
    26 00000000                                 		GLOBAL	_load_idtr
    27 00000000                                 		GLOBAL	_asm_inthandler20
    28 00000000                                 		GLOBAL	_asm_inthandler21
    29 00000000                                 		GLOBAL	_asm_inthandler2c
    30 00000000                                 		GLOBAL	_load_cr0
    31 00000000                                 		GLOBAL	_store_cr0
    32 00000000                                 		GLOBAL	_memtest_sub
    33 00000000                                 		EXTERN	_inthandler20
    34 00000000                                 		EXTERN	_inthandler21
    35 00000000                                 		EXTERN	_inthandler2c
    36 00000000                                 
    37 00000000                                 
    38 00000000                                 ; 実際の関数
    39 00000000                                 
    40                                          [SECTION .text]				; オブジェクトファイルではコレを書いてからプログラムを書く
    41 00000000                                 							; .textセクションにプログラムを置いておくということかと．
    42 00000000                                 
    43 00000000                                 _io_hlt:					; void io_hlt(void);
    44 00000000 F4                              		HLT
    45 00000001 C3                              		RET
    46 00000002                                 
    47 00000002                                 _io_cli:					; void io_cli(void);
    48 00000002 FA                              		CLI
    49 00000003 C3                              		RET
    50 00000004                                 
    51 00000004                                 _io_sti:					; void io_sti(void);
    52 00000004 FB                              		STI
    53 00000005 C3                              		RET
    54 00000006                                 
    55 00000006                                 _io_stihlt:					; void io_stihlt(void);
    56 00000006 FB                              		STI
    57 00000007 F4                              		HLT
    58 00000008 C3                              		RET
    59 00000009                                 
    60 00000009                                 _io_in8:					; int io_in8(int port);
    61 00000009 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    62 0000000D B8 00000000                     		MOV		EAX, 0
    63 00000012 EC                              		IN		AL, DX
    64 00000013 C3                              		RET
    65 00000014                                 
    66 00000014                                 _io_in16:					; int io_in16(int port);
    67 00000014 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    68 00000018 B8 00000000                     		MOV		EAX, 0
    69 0000001D 66 ED                           		IN		AX, DX
    70 0000001F C3                              		RET
    71 00000020                                 
    72 00000020                                 _io_in32:					; int io_in32(int port);
    73 00000020 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    74 00000024 ED                              		IN		EAX, DX
    75 00000025 C3                              		RET
    76 00000026                                 
    77 00000026                                 _io_out8:					; void io_out8(int port, int data);
    78 00000026 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    79 0000002A 8A 44 24 08                     		MOV		AL, [ESP+8]		; data
    80 0000002E EE                              		OUT		DX, AL
    81 0000002F C3                              		RET
    82 00000030                                 
    83 00000030                                 _io_out16:					; void io_out16(int port, int data);
    84 00000030 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    85 00000034 8B 44 24 08                     		MOV		EAX, [ESP+8]	; data
    86 00000038 66 EF                           		OUT		DX, AX
    87 0000003A C3                              		RET
    88 0000003B                                 
    89 0000003B                                 _io_out32:					; void io_out32(int port, int data);
    90 0000003B 8B 54 24 04                     		MOV		EDX, [ESP+4]	; port
    91 0000003F 8B 44 24 08                     		MOV		EAX, [ESP+8]	; data
    92 00000043 EF                              		OUT		DX, EAX
    93 00000044 C3                              		RET
    94 00000045                                 
    95 00000045                                 _io_load_eflags:			; int io_load_eflags(void);
    96 00000045 9C                              		PUSHFD				; PUSH EFLAGS
    97 00000046 58                              		POP		EAX
    98 00000047 C3                              		RET
    99 00000048                                 
   100 00000048                                 _io_store_eflags:			; void io_store_eflags(int eflags);
   101 00000048 8B 44 24 04                     		MOV		EAX, [ESP+4]
   102 0000004C 50                              		PUSH	EAX
   103 0000004D 9D                              		POPFD				; POP EFLAGS
   104 0000004E C3                              		RET
   105 0000004F                                 
   106 0000004F                                 _load_gdtr:					; void load_gdtr(int limit, int addr);
   107 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   108 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
   109 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
   110 0000005E C3                              		RET
   111 0000005F                                 
   112 0000005F                                 _load_idtr:					; void load_idtr(int limit, int addr);
   113 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   114 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   115 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   116 0000006E C3                              		RET
   117 0000006F                                 
   118 0000006F                                 _asm_inthandler20:
   119 0000006F 06                              		PUSH	ES
   120 00000070 1E                              		PUSH	DS
   121 00000071 60                              		PUSHAD
   122 00000072 89 E0                           		MOV		EAX, ESP
   123 00000074 50                              		PUSH	EAX
   124 00000075 66 8C D0                        		MOV		AX, SS
   125 00000078 8E D8                           		MOV		DS, AX
   126 0000007A 8E C0                           		MOV		ES, AX
   127 0000007C E8 [00000000]                   		CALL	_inthandler20	; void inthandler20( int *esp );
   128 00000081 58                              		POP		EAX
   129 00000082 61                              		POPAD
   130 00000083 1F                              		POP		DS
   131 00000084 07                              		POP		ES
   132 00000085 CF                              		IRETD				; 割り込み終了
   133 00000086                                 
   134 00000086                                 _asm_inthandler21:
   135 00000086 06                              		PUSH	ES
   136 00000087 1E                              		PUSH	DS
   137 00000088 60                              		PUSHAD
   138 00000089 89 E0                           		MOV		EAX, ESP
   139 0000008B 50                              		PUSH	EAX
   140 0000008C 66 8C D0                        		MOV		AX, SS
   141 0000008F 8E D8                           		MOV		DS, AX
   142 00000091 8E C0                           		MOV		ES, AX
   143 00000093 E8 [00000000]                   		CALL	_inthandler21	; void inthandler21( int *esp );
   144 00000098 58                              		POP		EAX
   145 00000099 61                              		POPAD
   146 0000009A 1F                              		POP		DS
   147 0000009B 07                              		POP		ES
   148 0000009C CF                              		IRETD				; 割り込み終了
   149 0000009D                                 
   150 0000009D                                 _asm_inthandler2c:
   151 0000009D 06                              		PUSH	ES
   152 0000009E 1E                              		PUSH	DS
   153 0000009F 60                              		PUSHAD
   154 000000A0 89 E0                           		MOV		EAX, ESP
   155 000000A2 50                              		PUSH	EAX
   156 000000A3 66 8C D0                        		MOV		AX, SS
   157 000000A6 8E D8                           		MOV		DS, AX
   158 000000A8 8E C0                           		MOV		ES, AX
   159 000000AA E8 [00000000]                   		CALL	_inthandler2c
   160 000000AF 58                              		POP		EAX
   161 000000B0 61                              		POPAD
   162 000000B1 1F                              		POP		DS
   163 000000B2 07                              		POP		ES
   164 000000B3 CF                              		IRETD				; 割り込み終了
   165 000000B4                                 
   166 000000B4                                 _load_cr0:					; int load_cr0(void);
   167 000000B4 0F 20 C0                        		MOV		EAX, CR0
   168 000000B7 C3                              		RET
   169 000000B8                                 
   170 000000B8                                 _store_cr0:					; void store_cr0(int cr0);
   171 000000B8 8B 44 24 04                     		MOV		EAX, [ESP+4]
   172 000000BC 0F 22 C0                        		MOV		CR0, EAX
   173 000000BF C3                              		RET
   174 000000C0                                 
   175 000000C0                                 _memtest_sub:		; unsigned int memtest_sub( unsigned int start, unsigned int end );
   176 000000C0 57                              		PUSH	EDI
   177 000000C1 56                              		PUSH	ESI
   178 000000C2 53                              		PUSH	EBX
   179 000000C3 BE AA55AA55                     		MOV		ESI, 0xaa55aa55
   180 000000C8 BF 55AA55AA                     		MOV		EDI, 0x55aa55aa
   181 000000CD 8B 44 24 10                     		MOV		EAX, [ESP+12+4]
   182 000000D1                                 
   183 000000D1                                 mts_loop:
   184 000000D1 89 C3                           		MOV		EBX, EAX
   185 000000D3 81 C3 00000FFC                  		ADD		EBX, 0x0ffc
   186 000000D9 8B 13                           		MOV		EDX, [EBX]
   187 000000DB 89 33                           		MOV		[EBX], ESI
   188 000000DD 83 33 FF                        		XOR		DWORD[EBX], 0xffffffff
   189 000000E0 3B 3B                           		CMP		EDI, [EBX]
   190 000000E2 75 18                           		JNE		mts_fin
   191 000000E4 83 33 FF                        		XOR		DWORD[EBX], 0xffffffff
   192 000000E7 3B 33                           		CMP		ESI, [EBX]
   193 000000E9 75 11                           		JNE		mts_fin
   194 000000EB 89 13                           		MOV		[EBX],EDX
   195 000000ED 05 00001000                     		ADD		EAX, 0x1000
   196 000000F2 3B 44 24 14                     		CMP		EAX, [ESP+12+8]
   197 000000F6 76 D9                           		JBE		mts_loop
   198 000000F8 5B                              		POP		EBX
   199 000000F9 5E                              		POP		ESI
   200 000000FA 5F                              		POP		EDI
   201 000000FB C3                              		RET
   202 000000FC                                 
   203 000000FC                                 mts_fin:
   204 000000FC 89 13                           		MOV		[EBX], EDX
   205 000000FE 5B                              		POP		EBX
   206 000000FF 5E                              		POP		ESI
   207 00000100 5F                              		POP		EDI
   208 00000101 C3                              		RET
